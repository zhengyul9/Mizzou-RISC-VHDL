library ieee; 
use ieee.std_logic_1164.all;
use ieee.numeric_bit.all;

entity ftmux is
 port( I0, I1, I2, I3: in std_logic;
       C, D: in bit;
       F: out std_logic );
end ftmux;

architecture str of ftmux is
begin
F <= I0 after 10ns when C&D = "00" 
else I1 after 10ns when C&D = "01"
else I2 after 10ns when C&D = "10"
else I3 after 10ns ;
end str;





library ieee; 
use ieee.std_logic_1164.all;
use ieee.numeric_bit.all;

entity ffmux is
 port( I0, I1, I2, I3: in std_logic;
       C, D: in std_logic;
       F: out std_logic );
end ffmux;

architecture str of ftmux is
signal sel: std_logic;
begin
process (C, D)
begin
sel <= C&D;
case sel is
 when "00" => F <= I0; 
 when "01" => F <= I1; 
 when "10" => F <= I2; 
 when "11" => F <= I3; 
end case;
end process;
end str;






library ieee; 
use ieee.std_logic_1164.all;
use ieee.numeric_bit.all;
use ieee.numeric_std.all;
entity fomux is
 port( I0, I1, I2, I3: in std_logic;
       C, D: in std_logic;
       F: out std_logic );
end fomux;

architecture structure of fomux is
signal sel: std_logic;
begin
sel <= C&D;
with sel select
F <= I0 after 10ns when "00",
     I1 after 10ns when "01",
     I2 after 10ns when "10",
     I3 after 10ns when "11",
end structure;

